generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  name      String?
  password  String
  createdAt DateTime @default(now())

  // 关系字段
  userEmailDomains UserEmailDomain[]
  points           Points[]
  // 每个用户拥有一个发信箱 (一对一)
  outbox           Outbox?
}

// 新增的发信箱模型
model Outbox {
  id     String @id @default(uuid())
  userId String @unique // 确保一个用户只有一个发信箱
  user   User   @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  // 关系字段: 一个发信箱包含多封已发送的邮件 (一对多)
  sentEmails Email[]
  @@index([userId])
}

model Email {
  id             String   @id @default(uuid())
  subject        String
  body           String
  recipientEmail String
  senderEmail    String // 发信人邮箱地址 (仍保留用于显示)
  createdAt      DateTime @default(now())
  outboxId String
  outbox   Outbox @relation(fields: [outboxId], references: [id])
  @@index([outboxId])
}

model Domain {
  id               String            @id @default(uuid())
  name             String            @unique
  createdAt        DateTime          @default(now())
  userEmailDomains UserEmailDomain[]
}

model UserEmailDomain {
  id        String   @id @default(uuid())
  userId    String
  domainId  String
  emailName String
  createdAt DateTime @default(now())
  user   User   @relation(fields: [userId], references: [id])
  domain Domain @relation(fields: [domainId], references: [id])
  @@unique([emailName, domainId])
  @@index([userId])
  @@index([domainId])
}

model Points {
  id        String   @id @default(uuid())
  userId    String
  points    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user User @relation(fields: [userId], references: [id])
  @@index([userId])
}
